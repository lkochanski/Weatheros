{"version":3,"sources":["components/Topbar/SearchInput.js","components/Topbar/ErrorDisplay.js","components/Topbar/Topbar.js","shared/LoadingSpinner.js","components/CurrentForecast/CityTime.js","shared/DisplayWeatherIcon.js","components/CurrentForecast/CurrentWeather.js","shared/LoadingPage.js","components/HourlyForecast/SpinnerItem.js","components/HourlyForecast/HourlySpinner.js","components/HourlyForecast/HourlyForecast.js","components/WeeklyForecast/WindDirection.js","components/WeeklyForecast/WeeklyForecastItem.js","components/WeeklyForecast/WeeklyForecast.js","containers/WeatherContainer.js","containers/MainContentContainer.js","components/App.js","serviceWorker.js","index.js"],"names":["SearchInput","props","onSubmit","handleSubmit","className","type","placeholder","onChange","handleChange","value","error","icon","faSearch","ErrorDisplay","message","Topbar","empty","LoadingSpinner","css","size","color","loading","CityTime","state","date","weekDay","day","month","year","timerID","days","months","this","setInterval","TimeByTimezone","clearInterval","Date","utcOffset","getTimezoneOffset","cityUtcOffset","time","setMinutes","getMinutes","setState","getDay","getDate","getMonth","getFullYear","id","toLocaleTimeString","Component","DisplayWeatherIcon","iconType","CurrentWeather","currentTemp","Math","round","data","main","temp","feelsLikeTemp","feels_like","maxTemp","temp_max","minTemp","temp_min","name","sys","country","timezone","alt","weather","description","clouds","all","wind","speed","humidity","pressure","LoadingPage","faSadTear","SpinnerItem","unixTimestamp","dt","hour","getHours","HourlySpinner","sliderPrevPage","currentIndex","itemsInSlide","disabledLeft","disabledRight","sliderNextPage","length","spinnerItems","handleOnSlideChange","event","item","responsive","0","items","574","766","990","1198","hourlyForecast","map","i","key","onClick","disabled","faAngleLeft","slideToIndex","onInitialized","onSlideChanged","onResized","dotsDisabled","buttonsDisabled","touchTrackingEnabled","mouseTrackingEnabled","mouseDragEnabled","fadeOutAnimation","faAngleRight","HourlyForecast","undefined","WindDirection","direction","console","log","deg","getDirection","WeeklyForecastItem","unixTimestampSunrise","sunrise","unixTimestampSunSet","sunset","sunriseDate","sunsetDate","sunriseHour","sunriseMinutes","sunsetHour","sunsetMinutes","dayIndex","monthIndex","displayTemperature","temperature","min","max","night","rain","wind_speed","wind_deg","WeeklyForecast","weeklyForecast","WeatherContainer","base","fullForecast","hourly","daily","MainContentContainer","App","update","fullForecastError","emptyInput","searchedCity","startCity","units","cityLat","cityLon","currentCityData","API","queryBySearchedCity","city","queryByCity","fetch","then","response","ok","Error","status","json","setTimeout","coord","lat","lon","catch","queryFullForecast","queryFullWeather","e","target","preventDefault","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a9ff8db1.chunk.js","sourcesContent":["import React from 'react';\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faSearch} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n\r\nconst SearchInput = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit} className={'form-wrapper'}>\r\n            <input type=\"text\"\r\n                   placeholder={\"Znajdź miasto\"}\r\n                   onChange={props.handleChange}\r\n                   value={props.value}\r\n                   className={props.error != null ? 'input-error' : null}/>\r\n\r\n            <button type={'submit'}><FontAwesomeIcon icon={faSearch}/></button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default SearchInput;\r\n","import React from 'react';\r\n\r\nconst ErrorDisplay = (props) => {\r\n        return (\r\n            <div>\r\n                <span className={'error-message'}>{props.message}</span>\r\n            </div>\r\n        );\r\n};\r\n\r\nexport default ErrorDisplay;\r\n","import React from 'react';\r\nimport SearchInput from \"./SearchInput\";\r\nimport \"../../styles/Topbar.scss\";\r\nimport \"../../styles/weatherIcons/weather-icons.min.css\";\r\nimport ErrorDisplay from \"./ErrorDisplay\";\r\n\r\nconst Topbar = (props) => {\r\n    return (\r\n        <div className={'topbar'}>\r\n            <div className={'topbar-wrapper'}>\r\n                <span><i className=\"wi wi-day-fog\"></i><strong>Weatheros</strong></span>\r\n                <div className={'input-wrapper'}>\r\n                <SearchInput handleChange={props.handleChange}\r\n                             handleSubmit={props.handleSubmit}\r\n                             error={props.error}\r\n                             value={props.value}\r\n                />\r\n                    {props.error != null ? <ErrorDisplay message={\"Nic nie znaleziono. Sprawdź czy nazwa miasta jest poprawna.\"} /> : null}\r\n                    {props.empty ? <ErrorDisplay message={\"Proszę wpisać nazwę miasta, którego szukasz.\"} /> : null}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Topbar;\r\n","import React from 'react';\r\nimport MoonLoader from 'react-spinners/MoonLoader';\r\n\r\nconst LoadingSpinner = () => {\r\n\r\n    const override =\r\n        'display: block; ' +\r\n        'margin: 0 auto; ' +\r\n        'border-color: red;';\r\n\r\n    return (\r\n            <MoonLoader css={override}\r\n                        size={30}\r\n                        color={'#DA0033'}\r\n                        loading={true}/>\r\n    );\r\n};\r\n\r\nexport default LoadingSpinner;\r\n","import React, {Component} from 'react';\r\nimport LoadingSpinner from \"../../shared/LoadingSpinner\";\r\n\r\nclass CityTime extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            date: null,\r\n            weekDay: null,\r\n            day: null,\r\n            month: null,\r\n            year: null,\r\n            timerID: null\r\n\r\n        }\r\n\r\n        this.days = ['Niedziela', 'Poniedziałek', 'Wtorek', 'Środa', 'Czwartek,','Piątek','Sobota'];\r\n        this.months = ['Stycznia', 'Lutego','Marca','Kwietnia','Maja','Czerwca','Lipca','Sierpnia','Września','Października', 'Listopada','Grudnia']\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.timerID = setInterval(\r\n            () => this.TimeByTimezone(),\r\n            1000)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.state.timerID);\r\n    }\r\n\r\n    TimeByTimezone() {\r\n        const date = new Date();\r\n        const utcOffset = date.getTimezoneOffset();\r\n        const cityUtcOffset = this.props.time / 60\r\n        date.setMinutes(date.getMinutes() + utcOffset);\r\n        date.setMinutes(date.getMinutes() + cityUtcOffset);\r\n        this.setState({\r\n            date: date,\r\n            weekDay: date.getDay(),\r\n            day: date.getDate(),\r\n            month: date.getMonth(),\r\n            year: date.getFullYear(),\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        const {date, day, weekDay, month, year} = this.state\r\n\r\n        return (\r\n            <>\r\n            {this.state.date != null? (\r\n                <div className={'city-time'}>\r\n                    <span id={'city-hour'}>\r\n                        {date.toLocaleTimeString()}\r\n                    </span>\r\n                    <span id={'city-date'}>\r\n                        {`${this.days[weekDay]} ${day} ${this.months[month]} ${year}`}\r\n                    </span>\r\n                </div>\r\n                ) :\r\n                <LoadingSpinner />}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CityTime;\r\n","import React from 'react';\r\nimport \"../styles/weatherIcons/weather-icons.min.css\";\r\n\r\nconst DisplayWeatherIcon = (props) => {\r\n\r\n    const icons = {\r\n        \"01d\": \"wi-day-sunny\",\r\n        \"02d\": \"wi-day-cloudy\",\r\n        \"03d\": \"wi-cloud\",\r\n        \"04d\": \"wi-cloudy\",\r\n        \"09d\": \"wi-rain-mix\",\r\n        \"10d\": \"wi-day-sleet\",\r\n        \"11d\": \"wi-storm-showers\",\r\n        \"13d\": \"wi-snow\",\r\n        \"50d\": \"wi-fog\",\r\n        \"01n\": \"wi-night-clear\",\r\n        \"02n\": \"wi-night-alt-cloudy\",\r\n        \"03n\": \"wi-cloud\",\r\n        \"04n\": \"wi-cloudy\",\r\n        \"09n\": \"wi-rain-mix\",\r\n        \"10n\": \"wi-night-alt-showers\",\r\n        \"11n\": \"wi-storm-showers\",\r\n        \"13n\": \"wi-night-alt-snow\",\r\n        \"50n\": \"wi-fog\",\r\n    }\r\n\r\n    return (\r\n        <div className={'current-weather-icon'}>\r\n            <i className={`wi ${icons[props.iconType]}`} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DisplayWeatherIcon;\r\n","import React from 'react';\r\nimport \"../../styles/CurrentWeather.scss\";\r\nimport \"../../styles/weatherIcons/weather-icons.min.css\";\r\nimport CityTime from \"./CityTime\";\r\nimport DisplayWeatherIcon from \"../../shared/DisplayWeatherIcon\";\r\n\r\nconst CurrentWeather = (props) => {\r\n\r\n    const currentTemp = Math.round(props.data.main.temp);\r\n    const feelsLikeTemp = Math.round(props.data.main.feels_like);\r\n    const maxTemp = Math.round(props.data.main.temp_max);\r\n    const minTemp = Math.round(props.data.main.temp_min);\r\n\r\n\r\n    return (\r\n        <section className={'current-weather'}>\r\n            <div className={'city-details'}>\r\n                <div className={'city-name'}>\r\n                    <span>{props.data.name}</span>\r\n                    <span id={'city-country'}>{props.data.sys.country}</span>\r\n                </div>\r\n                <CityTime time={props.data.timezone}/>\r\n            </div>\r\n\r\n            <div className={'current-weather-wrapper'}>\r\n                <DisplayWeatherIcon alt={props.data.weather[0].description}\r\n                                    iconType={props.data.weather[0].icon}/>\r\n                <div className={'current-weather-temperature'}>\r\n                    <div className={'weather-description-wrapper'}>\r\n                        <span className={'weather-description'}>{props.data.weather[0].description}</span>\r\n                    </div>\r\n                    <div className={'current-temperature'}>\r\n                        <span id={'current-temp'}>{currentTemp}°C</span>\r\n                        <span id={'feels-like-temp'}>Odczuwalna: {feelsLikeTemp}°C</span>\r\n                        <div className={'minmax-temperature'}>\r\n                            <span><i className=\"wi wi-thermometer-exterior\" />Min: {minTemp}°C</span>\r\n                            <span><i className=\"wi wi-thermometer\" />Max: {maxTemp}°C</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={'weather-details'}>\r\n                <div className={'details-panel'}>\r\n                    <i className=\"wi wi-cloudy\" />\r\n                    <span className={'details-desc'}>Zachmurzenie</span>\r\n                    <span>{props.data.clouds.all}%</span>\r\n                </div>\r\n                <div className={'details-panel'}>\r\n                    <i className=\"wi wi-strong-wind\" />\r\n                    <span className={'details-desc'}>Prędkość wiatru</span>\r\n                    <span>{props.data.wind.speed} m/s</span>\r\n                </div>\r\n                <div className={'details-panel'}>\r\n                    <i className=\"wi wi-raindrops\" />\r\n                    <span className={'details-desc'}>Wilgotność</span>\r\n                    <span>{props.data.main.humidity}%</span>\r\n                </div>\r\n                <div className={'details-panel'}>\r\n                    <i className=\"wi wi-barometer\" />\r\n                    <span className={'details-desc'}>Ciśnienie</span>\r\n                    <span>{props.data.main.pressure} HpA</span>\r\n                </div>\r\n            </div>\r\n\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default CurrentWeather;\r\n","import React from 'react';\r\nimport MoonLoader from 'react-spinners/MoonLoader';\r\nimport '../styles/LoadingPage.scss'\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faSadTear} from \"@fortawesome/free-solid-svg-icons/faSadTear\";\r\n\r\nconst override =\r\n    'display: block; ' +\r\n    'margin: 0 auto; ' +\r\n    'border-color: red;';\r\n\r\nconst LoadingPage = (props) => {\r\n    if (props.error != null) {\r\n        return (\r\n            <div className={'error-message-big'}>\r\n                <FontAwesomeIcon icon={faSadTear} className={'error-icon'}/>\r\n                <span>Coś poszło nie tak. Spróbuj jeszcze raz.</span>\r\n            </div>\r\n        )\r\n    } else if (props.loading) {\r\n        return (\r\n            <div className={'loading-spinner'}>\r\n                <MoonLoader css={override}\r\n                            size={100}\r\n                            color={'#DA0033'}\r\n                            loading={props.loading}/>\r\n            </div>\r\n        );\r\n    } else {\r\n        return null;\r\n    }\r\n};\r\n\r\nexport default LoadingPage;\r\n","import React from 'react';\r\nimport DisplayWeatherIcon from \"../../shared/DisplayWeatherIcon\";\r\n\r\n\r\nconst SpinnerItem = (props) => {\r\n\r\n    const unixTimestamp = props.data.dt;\r\n\r\n    const date = new Date(unixTimestamp * 1000);\r\n\r\n    const month = date.getMonth() + 1;\r\n    const day = date.getDate()\r\n    const hour = date.getHours();\r\n    const year = date.getFullYear();\r\n\r\n    const temp = Math.round(props.data.temp)\r\n\r\n\r\n    return (\r\n        <div className={'spinner-item noselect'}>\r\n            <div className={'spinner-item-hour'}>\r\n                <span id={'date'}>{day}/{month}/{year}</span>\r\n                <span id={'hour'}>{hour}:00</span>\r\n            </div>\r\n            <div className={'spinner-item-icon'}>\r\n                <DisplayWeatherIcon iconType={props.data.weather[0].icon} />\r\n            </div>\r\n            <div className={'spinner-item-temp'}>\r\n                <span>{temp}°C</span>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SpinnerItem;\r\n","import React, {Component} from 'react';\r\nimport ReactAliceCarousel from \"react-alice-carousel\";\r\nimport \"../../styles/HourlyForecast.scss\"\r\nimport 'react-alice-carousel/lib/alice-carousel.css'\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faAngleLeft} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {faAngleRight} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport SpinnerItem from \"./SpinnerItem\";\r\n\r\nexport default class HourlySpinner extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            currentIndex: 0,\r\n            itemsInSlide: 8,\r\n            responsive: {\r\n                0: {\r\n                    items: 3\r\n                },\r\n                574: {\r\n                    items: 5\r\n                },\r\n                766: {\r\n                    items: 6\r\n                },\r\n                990: {\r\n                    items: 8\r\n                },\r\n                1198: {\r\n                    items: 8\r\n                }\r\n            },\r\n            spinnerItems: this.spinnerItems(),\r\n            disabledRight: false,\r\n            disabledLeft: true,\r\n        }\r\n    };\r\n\r\n    spinnerItems() {\r\n        return this.props.hourlyForecast.map((item, i) => <SpinnerItem key={i + 1} data={item}/>)\r\n    }\r\n\r\n    sliderPrevPage = () => {\r\n        const currentIndex = this.state.currentIndex - this.state.itemsInSlide\r\n        if(currentIndex <= 0){\r\n            this.setState({\r\n                currentIndex: 0,\r\n                disabledLeft: true,\r\n            })\r\n        } else {\r\n            this.setState({\r\n                currentIndex,\r\n                disabledRight: false,\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    sliderNextPage = () => {\r\n        const {itemsInSlide, spinnerItems: {length}} = this.state\r\n        let currentIndex = this.state.currentIndex + itemsInSlide\r\n        // if (currentIndex >= length) currentIndex = length;\r\n        if (currentIndex >= (length-itemsInSlide)) {\r\n            this.setState({\r\n                currentIndex: length - itemsInSlide,\r\n                disabledRight: true,\r\n                disabledLeft: false,\r\n            })\r\n        } else {\r\n            this.setState({\r\n                currentIndex,\r\n                disabledRight: false,\r\n                disabledLeft: false,\r\n            })\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    handleOnSlideChange = (event) => {\r\n        const { itemsInSlide, item} = event\r\n        this.setState({ itemsInSlide, currentIndex: item})\r\n    }\r\n\r\n\r\n    render() {\r\n        const { currentIndex, spinnerItems, responsive } = this.state\r\n\r\n        return (\r\n            <div className={'hourly-spinner'}>\r\n                {this.state.disabledLeft ?\r\n                    <button onClick={this.sliderPrevPage} disabled><FontAwesomeIcon icon={faAngleLeft} /></button> :\r\n                    <button onClick={this.sliderPrevPage}><FontAwesomeIcon icon={faAngleLeft} /></button>}\r\n\r\n                <ReactAliceCarousel\r\n                    items={spinnerItems}\r\n                    slideToIndex={currentIndex}\r\n                    responsive={responsive}\r\n                    onInitialized={this.handleOnSlideChange}\r\n                    onSlideChanged={this.handleOnSlideChange}\r\n                    onResized={this.handleOnSlideChange}\r\n                    dotsDisabled={true}\r\n                    buttonsDisabled={true}\r\n                    touchTrackingEnabled={true}\r\n                    mouseTrackingEnabled={true}\r\n                    mouseDragEnabled={true}\r\n                    fadeOutAnimation={true}\r\n\r\n                />\r\n                {this.state.disabledRight ? <button onClick={this.sliderNextPage} disabled><FontAwesomeIcon icon={faAngleRight} /></button>\r\n                    :\r\n                    <button onClick={this.sliderNextPage}><FontAwesomeIcon icon={faAngleRight} /></button>\r\n                }\r\n\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport \"../../styles/HourlyForecast.scss\"\r\nimport LoadingSpinner from \"../../shared/LoadingSpinner\";\r\nimport HourlySpinner from \"./HourlySpinner\";\r\n\r\n\r\nconst HourlyForecast = (props) => {\r\n\r\n    if (props.hourlyForecast === undefined) {\r\n        return (\r\n            <LoadingSpinner />\r\n        )\r\n    } else {\r\n        return (\r\n            <div className={'hourly-forecast-wrapper'}>\r\n                <div className={'panel-title'}>\r\n                    <h3>Prognoza na 48 godzin</h3>\r\n                </div>\r\n                <HourlySpinner hourlyForecast={props.hourlyForecast} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nexport default HourlyForecast;","import React from 'react';\r\nimport './../../styles/weatherIcons/weather-icons-wind.min.css'\r\n\r\nconst WindDirection = (props) => {\r\n\r\n    const className = `wi wi-wind towards-${props.direction}-deg`;\r\n\r\n    console.log(props.direction)\r\n\r\n\r\n    const getDirection = (deg) => {\r\n        let direction = \"\"\r\n        if(deg < 23) direction = \"północ\"\r\n        if(deg >= 24) direction = \"płn. wschód\"\r\n        if(deg >= 69) direction = \"wschód\"\r\n        if(deg >= 114) direction = \"poł. wschód\"\r\n        if(deg >= 159) direction = \"południe\"\r\n        if(deg >= 204) direction = \"poł. zachód\"\r\n        if(deg >= 248) direction = \"zachód\"\r\n        if(deg >= 294) direction = \"płn. zachód\"\r\n        if(deg >= 336 && deg <= 659) direction = \"północ\"\r\n\r\n\r\n        return direction\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <i className={className}/><span>Kierunek wiatru: </span>{getDirection(props.direction)}\r\n        </>\r\n\r\n    );\r\n};\r\n\r\nexport default WindDirection;\r\n","import React from 'react';\r\nimport DisplayWeatherIcon from \"../../shared/DisplayWeatherIcon\";\r\nimport \"../../styles/weatherIcons/weather-icons.min.css\"\r\nimport WindDirection from \"./WindDirection\";\r\n\r\nconst WeeklyForecastItem = (props) => {\r\n\r\n    const unixTimestamp = props.data.dt;\r\n    const date = new Date(unixTimestamp * 1000);\r\n\r\n    const unixTimestampSunrise = props.data.sunrise;\r\n    const unixTimestampSunSet = props.data.sunset;\r\n\r\n    const sunriseDate = new Date(unixTimestampSunrise * 1000);\r\n    const sunsetDate = new Date(unixTimestampSunSet * 1000);\r\n\r\n    const sunriseHour = sunriseDate.getHours();\r\n    const sunriseMinutes = sunriseDate.getMinutes();\r\n\r\n    const sunsetHour = sunsetDate.getHours();\r\n    const sunsetMinutes = sunsetDate.getMinutes();\r\n\r\n    const dayIndex = date.getDay();\r\n    const day = date.getDate();\r\n    const monthIndex = date.getMonth();\r\n    const year = date.getFullYear();\r\n\r\n    const daysNames = [\"Niedziela\", \"Poniedziałek\", \"Wtorek\", \"Środa\", \"Czwartek\", \"Piątek\", \"Sobota\"];\r\n    const monthNames = [\"Stycznia\", \"Lutego\", \"Marca\", \"Kwietnia\", \"Maja\", \"Czerwca\", \"Lipca\", \"Sierpnia\", \"Września\", \"Października\", \"Listopada\", \"Grudnia\"];\r\n\r\n    const displayTemperature = (temperature) => Math.round(temperature);\r\n\r\n    return (\r\n        <section className={'weekly-forecast-item'}>\r\n\r\n            <div className={'date'}>\r\n                <span>{daysNames[dayIndex]}, {day} {monthNames[monthIndex]} {year} r.</span>\r\n                <div className={'sunrise-sunset'}>\r\n                    <span id={'sunrise'}><i className=\"wi wi-sunrise\"/>\r\n                        {sunriseHour > 9 ? sunriseHour : \"0\" + sunriseHour}:{sunriseMinutes > 9 ? sunriseMinutes : \"0\" + sunriseMinutes}\r\n                    </span>\r\n                    <span id={'sunset'}><i className=\"wi wi-sunset\"/>\r\n                        {sunsetHour > 9 ? sunsetHour : \"0\" + sunsetHour}:{sunsetMinutes > 9 ? sunsetMinutes : \"0\" + sunsetMinutes}\r\n                    </span>\r\n                </div>\r\n            </div>\r\n            <div className={'weekly-forecast-weather'}>\r\n                <div className={'weekly-wrapper'}>\r\n                    <div className={'weekly-forecast-icon'}>\r\n                        <DisplayWeatherIcon iconType={props.data.weather[0].icon}/>\r\n                        <span id={'desc'}>{props.data.weather[0].description}</span>\r\n                    </div>\r\n                    <div className={'weekly-forecast-temperature'}>\r\n                        <span id={'main-temp'}>{displayTemperature(props.data.temp.day)}°C</span>\r\n                        <span id={'feels-like'}>odczuwalna: {displayTemperature(props.data.feels_like.day)}°C</span>\r\n                    </div>\r\n                    <div className={'weekly-forecast-minmax'}>\r\n                        <span>\r\n                            <i className=\"wi wi-thermometer-exterior\"/><span>Min:</span> {displayTemperature(props.data.temp.min)}°C\r\n                        </span>\r\n                        <span>\r\n                            <i className=\"wi wi-thermometer\"/><span>Max:</span> {displayTemperature(props.data.temp.max)}°C\r\n                        </span>\r\n                        <span>\r\n                            <i className=\"wi wi-night-clear\"/><span>Noc:</span> {displayTemperature(props.data.temp.night)}°C\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n                <div className={'weekly-forecast-details'}>\r\n                    <div className={'details-column'}>\r\n                        <div className={'details-row'}>\r\n                            <i className=\"wi wi-cloud\"/><span className={'hide'}>Zachmurzenie: </span>{props.data.clouds} %\r\n                        </div>\r\n                        <div className={'details-row'}>\r\n                            <i className=\"wi wi-sprinkle\"/><span>Opady: </span>{props.data.rain ? props.data.rain : \"0.00\"} mm\r\n                        </div>\r\n                    </div>\r\n                    <div className={'details-column'}>\r\n                        <div className={'details-row'}>\r\n                            <i className=\"wi wi-strong-wind\"/><span>Wiatr: </span>{props.data.wind_speed} m/s\r\n                        </div>\r\n                        <div className={'details-row'}>\r\n                            <WindDirection direction={props.data.wind_deg}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className={'details-column'}>\r\n                        <div className={'details-row'}>\r\n                            <i className=\"wi wi-humidity\"/><span>Wilgotność: </span>{props.data.humidity} %\r\n                        </div>\r\n                        <div className={'details-row'}>\r\n                            <i className=\"wi wi-barometer\"/><span>Ciśnienie: </span>{props.data.pressure} HpA\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default WeeklyForecastItem;\r\n","import React from 'react';\r\nimport WeeklyForecastItem from \"./WeeklyForecastItem\";\r\nimport LoadingSpinner from \"../../shared/LoadingSpinner\";\r\nimport \"./../../styles/WeeklyForecast.scss\"\r\n\r\nconst WeeklyForecast = (props) => {\r\n\r\n    if (props.weeklyForecast === undefined) {\r\n        return (\r\n            <div className={'weekly-forecast'}>\r\n                <LoadingSpinner />\r\n            </div>\r\n        );\r\n    } else {\r\n\r\n        const days = props.weeklyForecast.map(item => (\r\n            <WeeklyForecastItem key={item.dt} data={item} />\r\n        ))\r\n\r\n        return (\r\n            <div className={'weekly-forecast'}>\r\n                <h3>Prognoza na kolejne 7 dni</h3>\r\n                {days}\r\n            </div>\r\n        )\r\n    }\r\n\r\n};\r\n\r\nexport default WeeklyForecast;\r\n","import React, {Component} from 'react';\r\nimport CurrentWeather from \"../components/CurrentForecast/CurrentWeather\";\r\nimport LoadingPage from \"../shared/LoadingPage\";\r\nimport HourlyForecast from \"../components/HourlyForecast/HourlyForecast\";\r\nimport WeeklyForecast from \"../components/WeeklyForecast/WeeklyForecast\";\r\n\r\nclass WeatherContainer extends Component {\r\n    render()\r\n    {\r\n        if(this.props.data.base != null && this.props.loading === false && !this.props.error) {\r\n            return (\r\n                <div className={'weather-container'}>\r\n                    <CurrentWeather data={this.props.data} />\r\n                    <HourlyForecast hourlyForecast={this.props.fullForecast.hourly}  />\r\n                    <WeeklyForecast weeklyForecast ={this.props.fullForecast.daily} />\r\n                </div>\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <div>\r\n                    <LoadingPage error={this.props.error} loading={this.props.loading} />\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default WeatherContainer;","import React from 'react';\r\nimport \"../styles/MainContentContainer.scss\";\r\nimport Topbar from \"../components/Topbar/Topbar\";\r\nimport WeatherContainer from \"./WeatherContainer\";\r\n\r\nconst MainContentContainer = (props) => {\r\n    return (\r\n        <div className={\"main-content-container\"}>\r\n            <Topbar handleChange={props.handleChange}\r\n                    handleSubmit={props.handleSubmit}\r\n                    error={props.error}\r\n                    value={props.value}\r\n                    empty={props.empty}\r\n            />\r\n        <WeatherContainer data={props.data}\r\n                          error={props.error}\r\n                          loading={props.loading}\r\n                          fullForecast={props.fullForecast}\r\n        />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MainContentContainer;","import React, {Component} from 'react';\r\nimport '../styles/App.css';\r\nimport MainContentContainer from \"../containers/MainContentContainer\";\r\n\r\n\r\nclass App extends Component {\r\n\r\n    state = {\r\n        update: true,\r\n        loading: true,\r\n        error: null,\r\n        fullForecastError: null,\r\n        emptyInput: false,\r\n        searchedCity: \"\",\r\n        startCity: \"Katowice\",\r\n        units: \"metric\",\r\n        cityLat: null,\r\n        cityLon: null,\r\n        currentCityData: {},\r\n        fullForecast: {},\r\n    }\r\n\r\n    API = {\r\n        key: \"78165b968fac88b2722ee7ab1fe4c9f3\",\r\n        base: \"http://api.openweathermap.org/data/2.5\"\r\n    }\r\n\r\n    queryBySearchedCity = (city) => {\r\n        const queryByCity = `${this.API.base}/weather?q=${city}&units=${this.state.units}&appid=${this.API.key}&lang=pl`;\r\n\r\n        fetch(queryByCity)\r\n            .then(response => {\r\n                if (response.ok) {\r\n                    return response;\r\n                }\r\n                throw new Error(response.status);\r\n            })\r\n            .then(response => response.json())\r\n            .then(currentCityData => {\r\n                setTimeout(()=> {\r\n                    this.setState({\r\n                        currentCityData,\r\n                        loading: false,\r\n                        error: null,\r\n                        searchedCity: \"\",\r\n                        cityLat: currentCityData.coord.lat,\r\n                        cityLon: currentCityData.coord.lon,\r\n                        update: true,\r\n                    });\r\n                },500)\r\n            }).catch(error => {\r\n            this.setState({\r\n                error,\r\n                loading: false,\r\n            })\r\n        })\r\n    }\r\n\r\n    queryFullForecast = () => {\r\n        const queryFullWeather = `${this.API.base}/onecall?lat=${this.state.cityLat}&lon=${this.state.cityLon}&units=${this.state.units}&appid=${this.API.key}&lang=pl`;\r\n\r\n        fetch(queryFullWeather)\r\n            .then(response => {\r\n                if(response.ok) {\r\n                    return response;\r\n                }\r\n                throw new Error(response.status);\r\n            })\r\n            .then(response => response.json())\r\n            .then(fullForecast => {\r\n                this.setState({\r\n                    fullForecast\r\n                })\r\n            }).catch(error => {\r\n                this.setState({\r\n                    fullForecastError: error\r\n                })\r\n        })\r\n\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.queryBySearchedCity(this.state.startCity);\r\n        this.setState({\r\n            loading: false,\r\n        })\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if(this.state.update && this.state.cityLon && this.state.cityLat) {\r\n          this.queryFullForecast()\r\n\r\n          this.setState({\r\n              update: false\r\n          })\r\n        }\r\n    }\r\n\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            searchedCity: e.target.value,\r\n        })\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (this.state.searchedCity.length > 0) {\r\n            this.queryBySearchedCity(this.state.searchedCity)\r\n            this.setState({\r\n                emptyInput: false,\r\n                loading: true,\r\n            })\r\n        } else if (this.state.searchedCity.length <= 0) {\r\n            this.setState({\r\n                emptyInput: true,\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        if(this.state.error != null) {\r\n            console.log(this.state.error)\r\n        }\r\n\r\n        return (\r\n            <div className={'App'}>\r\n                <MainContentContainer data={this.state.currentCityData}\r\n                                      fullForecast={this.state.fullForecast}\r\n                                      handleChange={this.handleChange}\r\n                                      handleSubmit={this.handleSubmit}\r\n                                      loading={this.state.loading}\r\n                                      error={this.state.error}\r\n                                      value={this.state.searchedCity}\r\n                                      empty={this.state.emptyInput}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}